
#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
#include <climits>

#include "../utils/utils.h"
#include "../utils/tree.h"

using namespace std;

printIndent(indent++);
printf("amount: %d\n", amount);
if (amount == 0) {
  printIndent(indent--);
  printf("return 0\n");
}

int main() {
  vector<int> coins = {10,9,2,5,3,7,101,18};
  Solution s;
  vector<int> ret = s.lengthOfLIS(coins);
  printCollection(ret);
}

int main() {
  vector<int> vec = {3,5,1,6,2,0,8,8888,8888,7,4};
  TreeNode* t = vecToTree(vec);
//   printTreePreOrder(t);
  Solution s; 
  auto res = s.lowestCommonAncestor(t, 5, 4);
  std::cout << "val:" << res->val << std::endl;
}

int main() {
  vector<vector<int>> grid = {{1, 3, 1}, {1, 5, 1}, {4, 2, 1}};
  Solution s;
  int ret = s.minPathSum(grid);
  cout << "ret: " << ret << endl;
}
